input {
  tcp {
    port => 5000
    type => syslog
    codec => plain {
      charset => "ISO-8859-1"
    }
  }
  udp {
    port => 5000
    type => syslog
    codec => plain {
      charset => "ISO-8859-1"
    }
  }
}

filter {
  # Get host and timestamp, and initialize basic fields
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:host}.gestion.rima.telefonica.es %{GREEDYDATA:greedydata}" }
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA} %{SYSLOGHOST:host}: %{GREEDYDATA:greedydata}" }
      overwrite => [ "host" ]
    }
    mutate {
      add_field => [ "vendor", "unknown" ]
      add_field => [ "syslog_facility", "unknown" ]
      add_field => [ "syslog_severity", "unknown" ]
      add_field => [ "syslog_tag", "unknown" ]
      add_field => [ "junos_task", "unknown" ]
      add_field => [ "process", "unknown" ]
      add_field => [ "relevance", "unknown" ]
      add_field => [ "unique_id", "unknown" ]
    }
  }
  # Drop non-junos routers by the hostname.
  if [host] =~ /(?i)^(rbr|ram|it|rra|rpc|pra|ara)/ {
    drop {}
  }
  # Set vendor to juniper (using hostnames) and get facility, severity, syslog_tag, process, pid and junos_task
  if [host] =~ /(?i)^(rba|nma|rrt|art|rnj|orc|rrf|sprl|srle|srce|ucg|rrcmad2-61|rrcmho1-01|rrcmho1-02|rrcmno2-61|HL)/ {
    grok {
      match => { "greedydata" => "(%{PROG:process}(?:\[%{POSINT}\])?)?: (%%{WORD:syslog_facility}-%{POSINT:syslog_severity}(-%{DATA:syslog_tag})?:)? (?<junos_task>(fpc\d+ )?\S+): %{GREEDYDATA}" }
      match => { "greedydata" => "(%{PROG:process}(?:\[%{POSINT}\])?)?: (%%{WORD:syslog_facility}-%{POSINT:syslog_severity}(-%{DATA:syslog_tag})?:)? %{GREEDYDATA}" }
      match => { "greedydata" => "(%{PROG:process}(?:\[%{POSINT}\])?)?: %%{WORD:syslog_facility}-%{POSINT:syslog_severity}: %{GREEDYDATA}" }
      match => { "greedydata" => "(%{PROG:process}(?:\[%{POSINT}\])?)?: %{GREEDYDATA}" }
      match => { "greedydata" => "(?<junos_task>(fpc\d+ )?\S+) %{GREEDYDATA}" }
      overwrite => [ "syslog_facility" , "syslog_severity", "syslog_tag", "junos_task", "process" ]
    }
    mutate {
      replace => [ vendor, "juniper" ]
    }
  }
  if [host] =~ /(?i)^(rrc)/ {
    drop {}
  }
################################################################################
#  Cosmetic Logs

  # Don't know how to span this message into the real ones
  if [message] =~ /last message repeated/ {
    drop {}
  }
  if [message] =~ "%CRON-6: (root) CMD (newsyslog)" {
    mutate { replace => [ relevance, "cosmetic" ] }
  }


################################################################################
# Known PRs


################################################################################
# Critical 


################################################################################
# Get unique-ids and correlate related events


  if [message] =~ "%DAEMON-4-SNMP_TRAP_LINK_DOWN:" {
    grok {
      match => { "message" => "%{DATA} %DAEMON-4-SNMP_TRAP_LINK_DOWN: ifIndex \S+ ifAdminStatus \S+ ifOperStatus \S+ ifName (?<event_id>\S+)$" }
    }
    mutate { 
      replace => [ relevance, "normal" ] 
      replace => [ unique_id, "%{host}:%{event_id}" ]
      gsub => [ unique_id, "[\(\)\s]", "" ] 
    }
  }

  if [message] =~ "%DAEMON-6-SNMP_TRAP_LINK_UP:" {
    grok {
      match => { "message" => "%{DATA} %DAEMON-6-SNMP_TRAP_LINK_UP: ifIndex \S+ ifAdminStatus \S+ ifOperStatus \S+ ifName (?<event_id>\S+)$" }
    }
    mutate { 
      replace => [ relevance, "normal" ] 
      replace => [ unique_id, "%{host}:%{event_id}" ]
      gsub => [ unique_id, "[\(\)\s]", "" ] 
    }
#    elasticsearch {
#      hosts => [localhost]
#      query => 'syslog_tag.raw:"SNMP_TRAP_LINK_DOWN" AND unique_id.raw:"%{unique_id}"'
#      fields => ["@timestamp", "started"]
#    }
#    date {
#      match => ["[started]", "ISO8601"]
#      target => "[started]"
#    }
#    ruby {
#      code => "event['duration_seg'] = (event['@timestamp'] - event['started']) rescue nil"
#    }
  }

  if [message] =~ "%DAEMON-5-RPD_ISIS_ADJDOWN:" {
    grok {
      match => { "message" => "%{DATA} %DAEMON-5-RPD_ISIS_ADJDOWN: IS-IS lost L2 adjacency to %{DATA} on (?<event_id>\S+), reason: %{DATA:isis_reason}" }
    }
    mutate { 
      replace => [ relevance, "normal" ] 
      replace => [ unique_id, "%{host}:%{event_id}" ] 
    }
  }

  if [message] =~ "%DAEMON-6-RPD_ISIS_ADJUP:" {
    grok {
      match => { "message" => "%{DATA} %DAEMON-6-RPD_ISIS_ADJUP: IS-IS new L2 adjacency to %{DATA} on (?<event_id>\S+)$" }
    }
    mutate { 
      replace => [ relevance, "normal" ] 
      replace => [ unique_id, "%{host}:%{event_id}" ] 
    }
  }

  if [message] =~ "%DAEMON-5-RPD_LDP_NBRDOWN:" {
    grok {
      match => { "message" => "%{DATA} %DAEMON-5-RPD_LDP_NBRDOWN: LDP neighbor %{DATA} ((?<event_id>\S+)) is down" }
    }
    mutate { 
      replace => [ relevance, "normal" ] 
      replace => [ unique_id, "%{host}:%{event_id}" ] 
    }
  }

  if [message] =~ "%DAEMON-6-RPD_LDP_NBRUP:" {
    grok {
      match => { "message" => "%{DATA} %DAEMON-6-RPD_LDP_NBRUP: LDP neighbor %{DATA} ((?<event_id>\S+)) is up" }
    }
    mutate { 
      replace => [ relevance, "normal" ] 
      replace => [ unique_id, "%{host}:%{event_id}" ] 
    }
  }

  if [message] =~ "%DAEMON-5-RPD_LDP_SESSIONDOWN:" {
    grok {
      match => { "message" => "%{DATA} %DAEMON-5-RPD_LDP_SESSIONDOWN: LDP session (?<event_id>\S+) is down, reason: all adjacencies down" }
    }
    mutate { 
      replace => [ relevance, "normal" ] 
      replace => [ unique_id, "%{host}:%{event_id}" ] 
    }
  }
  if [message] =~ "%DAEMON-6-RPD_LDP_SESSIONUP:" {
    grok {
      match => { "message" => "%{DATA} %DAEMON-6-RPD_LDP_SESSIONUP: LDP session (?<event_id>\S+) is up" }
    }
    mutate { 
      replace => [ relevance, "normal" ] 
      replace => [ unique_id, "%{host}:%{event_id}" ] 
    }
  }

  if [message] =~ "%DAEMON-3-RPD_SCHED_SLIP:" {
    grok {
      match => { "message" => "%{DATA} %DAEMON-3-RPD_SCHED_SLIP: %{POSINT:rpd_sched_slip} sec scheduler slip, user: %{DATA:user_time}, system: %{DATA:system_time}$" }
    }
  }

#############################################

#############################################  

################################################################################
}

output {
  	if [type] == "syslog" and "_grokparsefailure" in [tags] {
  	  file { path => "/opt/logstash/log/failed_syslog_events-%{+YYYY-MM-dd}" }
  	}
	elasticsearch {
		document_type => "syslog"
	    hosts => [ "elasticsearch:9200" ]
	}
	file {
	    path => "/opt/logstash/log/logstash_syslog-%{+YYYY-MM-dd}.log"
	}
  
}
